from fastapi import FastAPI, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
import tensorflow as tf
import librosa
import numpy as np

app = FastAPI()

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.post("/predict")
async def predict(audio_file: UploadFile = File(...)):
    try:
        # Read audio file
        contents = await audio_file.read()
        
        # Process audio (similar to Streamlit app)
        audio, sr = librosa.load(contents, sr=16000)
        
        # Pad or truncate
        fixed_length = 80000
        if len(audio) > fixed_length:
            audio = audio[:fixed_length]
        else:
            audio = np.pad(audio, (0, fixed_length - len(audio)), 'constant')
        
        # Reshape for model
        audio = tf.convert_to_tensor(audio, dtype=tf.float32)
        audio = tf.reshape(audio, (1, 80000, 1))
        
        # Load model and predict
        model = tf.keras.models.load_model('smart_diagnosis_model.keras')
        prediction = model.predict(audio, verbose=0)
        confidence = float(prediction[0][0])
        diagnosis = "COPD" if confidence > 0.45 else "NOT COPD"
        
        return {
            "diagnosis": diagnosis,
            "confidence": confidence,
            "filename": audio_file.filename
        }
        
    except Exception as e:
        return {"error": str(e)}
